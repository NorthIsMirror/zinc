

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function p10ks_vcs () {
  _P10K_DBG_OUT "p10ks_vcs replying with: ${p10ks_vcs["_info_msg_0_"]}"
  REPLY="${p10ks_vcs["_info_msg_0_"]}"
}

typeset -gA p10ks_vcs
p10ks_vcs["_info_msg_0_"]="<async:vcs>"
p10ks_vcs[status]="loading"

p10ks_vcs "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function p10ks_vcs_default_opts () {
  reply=(black CONDITIONAL CONDITIONAL async)
}

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function p10ks_vcs_display_hidden () {
  [[ "${p10ks_vcs["_info_msg_0_"]}" == "" ]] && true || false
}

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function p10ks_vcs_bg () {
  case "${p10ks_vcs[status]}" in
    "dirty") REPLY=${p10ks_vcs[color_dirty]} ;;
    "loading") REPLY=${p10ks_vcs[color_loading]} ;;
    *) REPLY=${p10ks_vcs[color_default]} ;;
  esac
}

p10ks_vcs[color_dirty]=${p10ks_vcs[color_dirty]:-"yellow"}
p10ks_vcs[color_loading]=${p10ks_vcs[color_loading]:-"8"}
p10ks_vcs[color_default]=${p10ks_vcs[color_default]:-"green"}

p10ks_vcs_bg "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT


# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

autoload -Uz vcs_info

p10ks_vcs_async ()
{
  vcs_info
  printf '%b' "${VCS_WORKDIR_DIRTY},;;;${vcs_info_msg_0_}"
}

# HACK/TODO ex. from my personal shell
zstyle ':vcs_info:svn*:*' actionformats '%c%u %F{red}| %a%f'
zstyle ':vcs_info:*' actionformats '%b %F{red}| %a%f'
# TODO unicode
zstyle ':vcs_info:hg*:*' branchformat ' %b'
# TODO unicode
zstyle ':vcs_info:git*:*' branchformat ' %b'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' enable git hg svn
zstyle ':vcs_info:svn*:*' formats %c%u
zstyle ':vcs_info:*' formats %b%c%u%m
zstyle ':vcs_info:hg*:*' get-bookmarks true
zstyle ':vcs_info:hg*:*' get-revision true
zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks
# TODO unicode
zstyle ':vcs_info:*' stagedstr ' ✚'
# TODO unicode
zstyle ':vcs_info:*' unstagedstr ' ●'

# VCS_INFO HOOKS
zstyle ':vcs_info:git*+set-message:*' hooks \n vcs-detect-changes git-untracked git-aheadbehind git-stash git-remotebranch git-tagname
zstyle ':vcs_info:hg*+set-message:*' hooks \n vcs-detect-changes hg-branchhead
zstyle ':vcs_info:svn*+set-message:*' hooks \n vcs-detect-changes svn-detect-changes

### Generic hook functions
function +vi-vcs-detect-changes() {
  if [[ "${hook_com[vcs]}" == "hg" ]]; then
    vcs_visual_identifier='VCS_HG_ICON'
  elif [[ "${hook_com[vcs]}" == "svn" ]]; then
    vcs_visual_identifier='VCS_SVN_ICON'
  fi

  if [[ -n "${hook_com[staged]}" ]] || [[ -n "${hook_com[unstaged]}" ]]; then
    VCS_WORKDIR_DIRTY=1
  else
    VCS_WORKDIR_DIRTY=0
  fi
}

### GIT hook functions

function +vi-git-untracked(){
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \n    git status --porcelain | grep '??' &> /dev/null ; then
    # This will show the marker if there are any untracked files in repo.
    # If instead you want to show the marker only if there are untracked
    # files in $PWD, use:
    #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
    # TODO unicode
    hook_com[unstaged]+='◌'
  fi
}

function +vi-git-aheadbehind() {
  local ahead behind
  local -a gitstatus

  # for git prior to 1.7
  # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
  ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
  # TODO unicode
  (( $ahead )) && gitstatus+=( " +${ahead}" )

  # for git prior to 1.7
  # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
  behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
  # TODO unicode
  (( $behind )) && gitstatus+=( " -${behind}" )

  hook_com[misc]+=${(j:/:)gitstatus}
}

# function +vi-git-remotebranch() {
#   local remote
#
#   # Are we on a remote-tracking branch?
#   remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \n#     --symbolic-full-name 2>/dev/null)/refs/remotes/}
#
#   # The first test will show a tracking branch whenever there is one. The
#   # second test, however, will only show the remote branch's name if it
#   # differs from the local one.
#   if [[ -n ${remote} ]] ; then
#   #if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
#     # TODO unicode
#     hook_com[branch]=" ${hook_com[branch]} [${remote}]"
#   fi
# }

### HG hook functions

function +vi-hg-storerev() {
  user_data[hash]=${hook_com[hash]}
}

function +vi-hg-branchhead() {
  local branchheadsfile i_tiphash i_branchname
  local -a branchheads

  local branchheadsfile=${hook_com[base]}/.hg/branchheads.cache

  # Bail out if any mq patches are applied
  [[ -s ${hook_com[base]}/.hg/patches/status ]] && return 0

  if [[ -r ${branchheadsfile} ]] ; then
    while read -r i_tiphash i_branchname ; do
      branchheads+=( $i_tiphash )
    done < ${branchheadsfile}

    if [[ ! ${branchheads[(i)${user_data[hash]}]} -le ${#branchheads} ]] ; then
      hook_com[revision]="^ ${hook_com[revision]}"
    fi
  fi
}

### Definitions done

p10ks_vcs_async "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

p10ks_vcs_async_return ()
{
  # $1 return code
  # $2 resulting (stdout) output from job execution
  # $3 execution time, floating point e.g. 0.0076138973 seconds
  # $4 resulting (stderr) error output from job execution

  _P10K_DBG_OUT "p10ks_vcs working out input: $2"
  local -a tmp
  tmp=("${(s.;;;.)2}")
  p10ks_vcs["_info_msg_0_"]="${tmp[2]}"
  tmp=("${(s.,.)tmp}")
  (( ${tmp[1]} )) && p10ks_vcs[status]="dirty" || p10ks_vcs[status]="returned"
}

p10ks_vcs_async_return "$@"

# AUTOGENERATED - DO NOT EDIT

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

p10ks_vcs_async_started ()
{
  _P10K_DBG_OUT "p10ks_vcs_async_started called..."
  # _display_hidden is hooked on the empty scalar:
  p10ks_vcs["_info_msg_0_"]="<loading...>"
  p10ks_vcs[status]="loading"
}

[[ "${(t)p10ks_vcs}" != "association" ]] && {
  typeset -gA p10ks_vcs
}

function _p10ks_vcs_async_complete () {
  _p10k_segment_async_reset_status p10ks_vcs
}

_p10k_add_hook _p10k_async_complete _p10ks_vcs_async_complete

p10ks_vcs_async_started "$@"

# AUTOGENERATED - DO NOT EDIT
