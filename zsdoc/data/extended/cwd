

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function _p10ks_cwd_strat_rtab () {
  ## reverse tabbing, useful in the prompt
  ## Copyright (C) 2008 by Daniel Friesel <derf@xxxxxxxxxxxxxxxxxx>
  ## Copyright (C) 2018 by Ben Klein <robobenklein@xxxxxxxxxxxxxxxxxx>
  ## License: WTFPL <http://sam.zoy.org/wtfpl>
  ##
  ## Robobenklein: The original had a CAVEAT:
  ## "directory-names containing two or more consecutive spaces are not supported"
  ## This issue has been fixed.
  ##
  ## Also the script is now a ZSH function instead of an executable shebang file.
  # A modification of the reverse tabbing utility by Daniel Friesel <derf@xxxxxxxxxxxxxxxxxx>

  setopt localoptions
  setopt rc_quotes null_glob

  typeset -i lastfull=0
  typeset -i short=0
  typeset -i tilde=0
  typeset -i named=0

  if zstyle -t ':prompt:rtab' fish; then
    lastfull=1
    short=1
    tilde=1
  fi
  if zstyle -t ':prompt:rtab' nameddirs; then
    tilde=1
    named=1
  fi
  zstyle -t ':prompt:rtab' last && lastfull=1
  zstyle -t ':prompt:rtab' short && short=1
  zstyle -t ':prompt:rtab' tilde && tilde=1

  while [[ $1 == -* ]]; do
    case $1 in
      -f|--fish)
        lastfull=1
        short=1
        tilde=1
      ;;
      -h|--help)
        print "Usage: $0 [-f -l -s -t] [directory]"
        print ' -f, --fish      fish-simulation, like -l -s -t'
        print ' -l, --last      Print the last directory''s full name'
        print ' -s, --short     Truncate directory names to the first character'
        print ' -t, --tilde     Substitute ~ for the home directory'
        print ' -T, --nameddirs Substitute named directories as well'
        print 'The long options can also be set via zstyle, like'
        print '  zstyle :prompt:rtab fish yes'
        return 0
      ;;
      -l|--last) lastfull=1 ;;
      -s|--short) short=1 ;;
      -t|--tilde) tilde=1 ;;
      -T|--nameddirs)
        tilde=1
        named=1
      ;;
    esac
    shift
  done

  typeset -a tree expn
  typeset result part dir=${1-$PWD}
  typeset -i i

  [[ -d $dir ]] || return 0

  if (( named )) {
    for part in ${(k)nameddirs}; {
      [[ $dir == ${nameddirs[$part]}(/*|) ]] && dir=${dir/${nameddirs[$part]}/~$part}
    }
  }
  (( tilde )) && dir=${dir/$HOME/~}
  tree=(${(s:/:)dir})
  (
    unfunction chpwd 2> /dev/null
    unset chpwd_functions 2>/dev/null
    if [[ $tree[1] == ~* ]] {
      cd ${~tree[1]}
      result=$tree[1]
      shift tree
    } else {
      cd /
    }
    for dir in $tree; {
      if (( lastfull && $#tree == 1 )) {
        result+="/$tree"
        break
      }
      expn=(a b)
      part=''
      i=0
      until [[ (( ${#expn} == 1 )) || $dir = $expn || $i -gt 99 ]]  do
        (( i++ ))
        part+=$dir[$i]
        expn=($(echo ${part}*(-/)))
        (( short )) && break
      done
      result+="/$part"
      cd $dir
      shift tree
    }
    echo ${result:-/}
  )
}

_p10ks_cwd_chpwd ()
{
  case "${_P10KS_CWD[strategy]}" in
    'rtab')
      # _P10K_DBG_OUT "_p10ks_cwd_strat_rtab "${_P10KS_CWD_STRAT_ARGS}""
      _P10KS_CWD[output]="$(_p10ks_cwd_strat_rtab ${_P10KS_CWD_STRAT_ARGS} )"
      ;;
    *)
      _P10KS_CWD[output]="%~"
      ;;
  esac
}

p10ks_cwd ()
{
  # shift 4 # we don't care for the P10K args
  _P10KS_CWD[strategy]="$5"
  _P10KS_CWD_STRAT_ARGS=("${@:6}") # dump rest of args for strategy options

  [[ "${_P10KS_CWD[output]}" == "" ]] && _p10ks_cwd_chpwd

  REPLY="${_P10KS_CWD[output]}"
}

# cleaner envvars
typeset -gA _P10KS_CWD
typeset -ga _P10KS_CWD_STRAT_ARGS

add-zsh-hook chpwd _p10ks_cwd_chpwd

p10ks_cwd "$@"

# AUTOGENERATED - DO NOT EDIT

# P10K Autodoc added: 
autoload -Uz p10ks_cwd_default_opts
autoload -Uz p10ks_cwd_display_hidden
autoload -Uz p10ks_cwd_bg
autoload -Uz p10ks_cwd_fg
autoload -Uz p10ks_cwd_async
autoload -Uz p10ks_cwd_async_return
autoload -Uz p10ks_cwd_async_started

p10ks_cwd_default_opts() {
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

p10ks_cwd_default_opts ()
{
  reply=(black blue normal normal)
}
}
