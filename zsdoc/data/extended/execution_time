

# AUTOGENERATED - DO NOT EDIT
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function _p10ks_execution_time_preexec () {
  # set the start time point using epoch
  _P10K_DBG_OUT "_p10ks_execution_time_preexec"
  p10ks_execution_time[process_started]="1"
  p10ks_execution_time[last_execution_time]="0"
  _p10ks_execution_time_process_start=$EPOCHREALTIME
}

function _p10ks_execution_time_precmd () {
  _P10K_DBG_OUT "_p10ks_execution_time_precmd"
  (( p10ks_execution_time[process_started] )) && {
    REPLY=""
    p10ks_execution_time[last_execution_time]="$(( EPOCHREALTIME - _p10ks_execution_time_process_start ))"
    if (( p10ks_execution_time[last_execution_time] < 60 )); then
      # number of seconds:
      print -zf '%.2f' "${p10ks_execution_time[last_execution_time]}"
      read -rz
    elif (( p10ks_execution_time[last_execution_time] < 3600 )); then
      # minutes and seconds:
      print -zf '%d' "${p10ks_execution_time[last_execution_time]}"
      read -rz
      strftime -s REPLY -- "%-M:%S" "${REPLY}"
    elif (( p10ks_execution_time[last_execution_time] < 86400 )); then
      print -zf '%d' "${p10ks_execution_time[last_execution_time]}"
      read -rz
      TZ=GMT strftime -s REPLY -- "%K:%M:%S" "${REPLY}"
    else
      # literally days:
      print -zf '%d' "${p10ks_execution_time[last_execution_time]}"
      read -rz
      TZ=GMT strftime -s REPLY -- '%-jd%K:%M:%S' "${REPLY}"
    fi
    p10ks_execution_time[formatted_output]="${REPLY} â§–"
    _P10K_DBG_OUT "p10ks_execution_time[formatted_output]="${p10ks_execution_time[formatted_output]}""
    p10ks_execution_time[process_started]="0"
  }
}

function _p10ks_execution_time_async_complete () {
  # _P10K_DBG_OUT "pexectime async done..."
  p10ks_execution_time[last_execution_time]=0
  p10ks_execution_time[formatted_output]=""
}

function p10ks_execution_time () {
  # TODO formatting options
  REPLY="${p10ks_execution_time[formatted_output]}"
}

# float (H)ideval:
typeset -gHF 4 _p10ks_execution_time_process_start
_p10ks_execution_time_process_start=$EPOCHREALTIME
# typeset -gH _p10ks_execution_time_last_execution_time
# integer -gH _p10ks_execution_time_process_started

typeset -gA p10ks_execution_time
p10ks_execution_time[process_started]=0

if [[ "${p10ks_execution_time[threshold]}" == "" ]]; then
  [[ "$5" != "" ]] && p10ks_execution_time[threshold]="$5" \n  || p10ks_execution_time[threshold]="1"
fi

_p10k_add_hook _p10k_preexec _p10ks_execution_time_preexec
_p10k_add_hook _p10k_precmd _p10ks_execution_time_precmd
_p10k_add_hook _p10k_async_complete _p10ks_execution_time_async_complete

p10ks_execution_time "$@"

# AUTOGENERATED - DO NOT EDIT

# P10K Autodoc added: 
autoload -Uz p10ks_execution_time_default_opts
autoload -Uz p10ks_execution_time_display_hidden
autoload -Uz p10ks_execution_time_bg
autoload -Uz p10ks_execution_time_fg
autoload -Uz p10ks_execution_time_async
autoload -Uz p10ks_execution_time_async_return
autoload -Uz p10ks_execution_time_async_started

p10ks_execution_time_default_opts() {
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function p10ks_execution_time_default_opts () {
  reply=(244 black CONDITIONAL notify_complete)
}
}

p10ks_execution_time_display_hidden() {
# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

function p10ks_execution_time_display_hidden () {
  if (( p10ks_execution_time[threshold] <= p10ks_execution_time[last_execution_time] )); then
    false
  else
    true
  fi
}

typeset -gA p10ks_execution_time

if [[ "${p10ks_execution_time[threshold]}" == "" ]]; then
  p10ks_execution_time[threshold]="1"
fi

p10ks_execution_time_display_hidden "$@"
}
