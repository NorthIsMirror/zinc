# vim: ft=zsh ts=2 sw=2 et fenc=utf-8

autoload -Uz vcs_info

p10ks_vcs_async ()
{
  vcs_info
  printf '%b' "${vcs_info_msg_0_}"
}

zstyle ':vcs_info:svn*:*' actionformats '%c%u %F{red}| %a%f'
zstyle ':vcs_info:*' actionformats '%b %F{red}| %a%f'
zstyle ':vcs_info:hg*:*' branchformat ' %b'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' enable git hg svn
zstyle ':vcs_info:svn*:*' formats %c%u
zstyle ':vcs_info:*' formats %b%c%u%m
zstyle ':vcs_info:hg*:*' get-bookmarks true
zstyle ':vcs_info:hg*:*' get-revision true
zstyle ':vcs_info:git*+set-message:*' hooks vcs-detect-changes git-untracked git-aheadbehind git-stash git-remotebranch git-tagname
zstyle ':vcs_info:hg*+set-message:*' hooks vcs-detect-changes
zstyle ':vcs_info:svn*+set-message:*' hooks vcs-detect-changes svn-detect-changes
zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks
zstyle ':vcs_info:*' stagedstr ' ✚'
zstyle ':vcs_info:*' unstagedstr ' ●'

+vi-git-untracked () {
	local FLAGS
	FLAGS=('--porcelain')
	if [[ "$POWERLEVEL9K_VCS_SHOW_SUBMODULE_DIRTY" == "false" ]]
	then
		FLAGS+='--ignore-submodules=dirty'
	fi
	if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' && -n $(command git status ${FLAGS} | \grep -E '^\?\?' 2> /dev/null | tail -n1) ]]
	then
		hook_com[unstaged]+=" $(print_icon 'VCS_UNTRACKED_ICON')"
		VCS_WORKDIR_HALF_DIRTY=true
	else
		VCS_WORKDIR_HALF_DIRTY=false
	fi
}

+vi-git-aheadbehind () {
	local ahead behind branch_name
	local -a gitstatus
	branch_name=$(command git symbolic-ref --short HEAD 2>/dev/null)
	ahead=$(command git rev-list "${branch_name}"@{upstream}..HEAD 2>/dev/null | wc -l)
	(( ahead )) && gitstatus+=(" $(print_icon 'VCS_OUTGOING_CHANGES_ICON')${ahead// /}")
	behind=$(command git rev-list HEAD.."${branch_name}"@{upstream} 2>/dev/null | wc -l)
	(( behind )) && gitstatus+=(" $(print_icon 'VCS_INCOMING_CHANGES_ICON')${behind// /}")
	hook_com[misc]+=${(j::)gitstatus}
}

+vi-vcs-detect-changes () {
	if [[ "${hook_com[vcs]}" == "git" ]]
	then
		local remote=$(command git ls-remote --get-url 2> /dev/null)
		if [[ "$remote" =~ "github" ]]
		then
			vcs_visual_identifier='VCS_GIT_GITHUB_ICON'
		elif [[ "$remote" =~ "bitbucket" ]]
		then
			vcs_visual_identifier='VCS_GIT_BITBUCKET_ICON'
		elif [[ "$remote" =~ "stash" ]]
		then
			vcs_visual_identifier='VCS_GIT_BITBUCKET_ICON'
		elif [[ "$remote" =~ "gitlab" ]]
		then
			vcs_visual_identifier='VCS_GIT_GITLAB_ICON'
		else
			vcs_visual_identifier='VCS_GIT_ICON'
		fi
	elif [[ "${hook_com[vcs]}" == "hg" ]]
	then
		vcs_visual_identifier='VCS_HG_ICON'
	elif [[ "${hook_com[vcs]}" == "svn" ]]
	then
		vcs_visual_identifier='VCS_SVN_ICON'
	fi
	if [[ -n "${hook_com[staged]}" ]] || [[ -n "${hook_com[unstaged]}" ]]
	then
		VCS_WORKDIR_DIRTY=true
	else
		VCS_WORKDIR_DIRTY=false
	fi
}

p10ks_vcs_async "$@"
